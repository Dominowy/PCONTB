// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PCONTB.Panel.Infrastructure.Context;

#nullable disable

namespace PCONTB.Panel.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Sessions.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Ended")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.Favorites.UserProjectFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjectFavorite", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.Roles.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.Wallets.UserWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWallet", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Community.CommunityMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectCommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityMessage", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Location.Countries.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Campaigns.ProjectCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ProjectCampaign", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Campaigns.ProjectCampaignContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("ProjectCampaignContent", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Collaborators.ProjectCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ManageCommunityPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageFulfillmentPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManageProjectPermission")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectCollaborator", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Communites.ProjectCommunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ProjectCommunity", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Files.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectImage", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Files.ProjectVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProjectVideo", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CampaingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaingId")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommunityId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Sessions.Session", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Account.Users.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.Favorites.UserProjectFavorite", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Projects.Project", "Project")
                        .WithMany("Favorites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCONTB.Panel.Domain.Account.Users.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.Roles.UserRole", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Account.Users.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.Wallets.UserWallet", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Account.Users.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Community.CommunityMessage", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Community.CommunityMessage", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCONTB.Panel.Domain.Projects.Communites.ProjectCommunity", "ProjectCommunity")
                        .WithMany("Messages")
                        .HasForeignKey("ProjectCommunityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCONTB.Panel.Domain.Account.Users.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");

                    b.Navigation("ProjectCommunity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Campaigns.ProjectCampaignContent", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Projects.Campaigns.ProjectCampaign", "Campaign")
                        .WithMany("CampaignContents")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Collaborators.ProjectCollaborator", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Projects.Project", "Project")
                        .WithMany("Collaborators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCONTB.Panel.Domain.Account.Users.User", "User")
                        .WithMany("Collaborators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Project", b =>
                {
                    b.HasOne("PCONTB.Panel.Domain.Projects.Campaigns.ProjectCampaign", "Campaing")
                        .WithOne()
                        .HasForeignKey("PCONTB.Panel.Domain.Projects.Project", "CampaingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCONTB.Panel.Domain.Categories.Category", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCONTB.Panel.Domain.Projects.Communites.ProjectCommunity", "Community")
                        .WithOne()
                        .HasForeignKey("PCONTB.Panel.Domain.Projects.Project", "CommunityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCONTB.Panel.Domain.Location.Countries.Country", "Country")
                        .WithMany("Projects")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCONTB.Panel.Domain.Projects.Files.ProjectImage", "Image")
                        .WithOne()
                        .HasForeignKey("PCONTB.Panel.Domain.Projects.Project", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PCONTB.Panel.Domain.Account.Users.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCONTB.Panel.Domain.Projects.Files.ProjectVideo", "Video")
                        .WithOne()
                        .HasForeignKey("PCONTB.Panel.Domain.Projects.Project", "VideoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Campaing");

                    b.Navigation("Category");

                    b.Navigation("Community");

                    b.Navigation("Country");

                    b.Navigation("Image");

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Account.Users.User", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("Favorites");

                    b.Navigation("Messages");

                    b.Navigation("Projects");

                    b.Navigation("Roles");

                    b.Navigation("Sessions");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Categories.Category", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Community.CommunityMessage", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Location.Countries.Country", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Campaigns.ProjectCampaign", b =>
                {
                    b.Navigation("CampaignContents");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Communites.ProjectCommunity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PCONTB.Panel.Domain.Projects.Project", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
